<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
       default-lazy-init="true">


    <!-- TCC 业务活动日志（事务日志）的数据源 -->
    <bean id="tccDataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="clone">
        <!-- 基本属性driverClassName、 url、user、password -->
        <property name="url" value="${db.url}" />
        <property name="username" value="${db.username}" />
        <property name="password" value="${db.password}" />

        <!-- 配置初始化大小、最小、最大 -->
        <!-- 通常来说，只需要修改initialSize、minIdle、maxActive -->
        <!-- 初始化时建立物理连接的个数，缺省值为0 -->
        <property name="initialSize" value="1" />
        <!-- 最小连接池数量 -->
        <property name="minIdle" value="1" />
        <!-- 最大连接池数量，缺省值为8 -->
        <property name="maxActive" value="20" />

        <!-- 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。 -->
        <property name="maxWait" value="6000" />
    </bean>

    <!-- 使用SpringJdbc事务库 -->
    <bean id="transactionRepository"
          class="org.mengyun.tcctransaction.spring.repository.SpringJdbcTransactionRepository">
        <property name="dataSource" ref="tccDataSource" />
        <property name="domain" value="edoc"/>
        <property name="tbSuffix" value="_edoc"/>
    </bean>
    <!--======= TCC Transaction Begin ================= -->

    <!-- 设置恢复策略(可选），V1.1.0 新增定时任务配置 -->
    <bean class="org.mengyun.tcctransaction.spring.recover.DefaultRecoverConfig">
        <!-- maxRetryCount表示一个事务最多尝试恢复次数，超过将不在自动恢复，需要人工干预，默认是30次 -->
        <property name="maxRetryCount" value="30"/>
        <!-- recoverDuration表示一个事务日志当超过一定时间间隔后没有更新就会被认为是发生了异常，需要恢复，
		恢复Job将扫描超过这个时间间隔依旧没有更新的事务日志，并对这些事务进行恢复，时间单位是秒，默认是120秒 -->
        <property name="recoverDuration" value="120"/>
        <!-- cronExpression表示恢复Job触发间隔配置，默认是(每分钟)0 */1 * * * ? -->
        <property name="cronExpression" value="0 */1 * * * ?"/>
        <!--delayCancelExceptions(1.2.3版中新加的配置)表示系统发生了设置的异常时，
        主事务不立即rollback，而是由恢复job来执行事务恢复。通常需要将超时异常设置为delayCancelExceptions，
        这样可以避免因为服务调用时发生了超时异常，主事务如果立刻rollback, 但是从事务还没执行完，
        从而造成主事务rollback失败。示例中com.alibaba.dubbo.remoting.TimeoutException为底层rpc框架为dubbo，
        超时异常发生时框架抛出的超时异常类，需要将其加入delayCancelExceptions中-->
        <property name="delayCancelExceptions">
            <util:set>
                <value>com.alibaba.dubbo.remoting.TimeoutException</value>
            </util:set>
        </property>
    </bean>
</beans>
